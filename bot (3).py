import time
from random import *
import telebot
from telebot import types
from random import choice
from nltk import edit_distance
from time import *
import json


bot = telebot.TeleBot('6022267530:AAFvxOFkOq1tnEhOCZBbbxW40_8ydne3QHQ')


BOT_CONFIG = {
    "–ø—Ä–∏–≤–µ—Ç": ['–ü—Ä–∏–≤–µ—Ç', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–°–∞–ª–∞–º'],
    '–∫–∞–∫ –¥–µ–ª–∞': ['–ù–æ—Ä–º–∞–ª—å–Ω–æ', '–•–æ—Ä–æ—à–æ'],
    '–ø–æ–∫–∞': ['–î–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–ü–æ–∫–∞']
}

PIZZA_SIZES = {
    '–±–æ–ª—å—à—É—é': 100,
    '—Å—Ä–µ–¥–Ω—é—é': 75,
    '–º–∞–ª–µ–Ω—å–∫—É—é': 50
}
user_data = {}
zakaz = 0

ADMINS = [711136853,
          993627590]

prv_ord = False
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>, —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É —Ç—É—Ç, –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–∏—à–∏ <u>/help</u>. –ê –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π <u>/order</u> ', parse_mode='html')

def load_previous_order(user_id):
    with open('order.json', 'r') as file:
        for line in file:
            try:
                data = json.loads(line)
                if data['user_id'] == user_id:
                    return data
            except json.JSONDecodeError:
                continue
    return None

@bot.message_handler(commands=['order'])
def order(message):
    global zakaz
    zakaz = 1
    bot.send_message(message.chat.id, '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...')
    #sleep(randint(3,20))
    bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è')
    bot.send_message(message.chat.id, choice(BOT_CONFIG['–ø—Ä–∏–≤–µ—Ç']))
    previous_order = load_previous_order(message.chat.id)
    if previous_order:
        bot.send_message(message.chat.id,
                         f"–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–∫–∞–∑: {previous_order['pizza_size']} {previous_order['pizza_type']}. –û–ø–ª–∞—Ç–∞: {previous_order['payment_method']}. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É: {previous_order['delivery_address']}")


@bot.message_handler(commands=['menu'])
def menu(message):
    bot.send_message(message.chat.id, '–í–æ—Ç –Ω–∞—à–µ –º–µ–Ω—é:')
    peperoni = open('./peperoni.jpg', 'rb')
    margarita = open('./margarita.jpg', 'rb')
    sir  = open('./4sira.jpg', 'rb')
    hawaiana = open('./hawaiana.jpg', 'rb')
    bot.send_photo(message.chat.id, peperoni, caption = '–ü–µ–ø–µ—Ä–æ–Ω–∏')
    bot.send_photo(message.chat.id, margarita, caption = '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞')
    bot.send_photo(message.chat.id, sir, caption = '4 —Å—ã—Ä–∞')
    bot.send_photo(message.chat.id, hawaiana, caption = '–ì–∞–≤–∞–π—Å–∫–∞—è')

@bot.message_handler(commands=['site'])
def site(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url='https://youtu.be/dQw4w9WgXcQ')
    markup.row(btn1)
    bot.send_message(message.chat.id, '–°–∞–º–∞—è –≤–∫—É—Å–Ω–∞—è –ø–∏—Ü—Ü–∞ –∑–¥–µ—Å—å üçï', reply_markup=markup)

def filter_text(text):
    text = text.lower()
    alphabet = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è -"
    result = [c for c in text if c in alphabet]
    return ''.join(result)

def match_text(text, example):
    text = filter_text(text)
    example = example.lower()
    distance = edit_distance(text, example) / len(example)
    return distance < 0.4



@bot.message_handler()
def handle(message):
    global zakaz, process_order, process_address, size, show_buttons, user_data, show_buttons_size, prv_ord
    user_text = message.text
    previous_order = load_previous_order(message.chat.id)
    if zakaz >= 1:
        if match_text(user_text, '–ø—Ä–∏–≤–µ—Ç') and zakaz == 1:
            zakaz = 2
            user_data = {}
            show_buttons_size(message.chat.id)
        elif match_text(user_text, '–ü–æ–≤—Ç–æ—Ä') and zakaz == 1:
            bot.send_message(message.chat.id, f'–í—ã —Ö–æ—Ç–∏—Ç–µ {previous_order["pizza_size"]} {previous_order["pizza_type"]} , –æ–ø–ª–∞—Ç–∞ ‚Äì {previous_order["payment_method"]} , –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É {previous_order["delivery_address"]}')
            zakaz = 7
            prv_ord = True
        elif zakaz == 7:
            finish(message.chat.id, user_text)
        elif 'payment' in user_data and 'address' not in user_data:
            process_address(message.chat.id, user_text)
        elif zakaz == 6:
            process_address(message.chat.id, user_text)
        else:
            bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å.')
    elif match_text(user_text, '–ø—Ä–∏–≤–µ—Ç'):
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>, —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É —Ç—É—Ç, –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–∏—à–∏ <u>/help</u>. –ê –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π <u>/order</u>', parse_mode='html')
    else:
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å.')

    def size(user_id, user_text):
        if match_text(user_text, '–±–æ–ª—å—à—É—é'):
            user_data['size'] = '–±–æ–ª—å—à—É—é'
            show_buttons(message.chat.id)
            zakaz = 3
        elif match_text(user_text, '—Å—Ä–µ–¥–Ω—é—é'):
            user_data['size'] = '—Å—Ä–µ–¥–Ω—é—é'
            show_buttons(message.chat.id)
            zakaz = 3
        elif match_text(user_text, '–º–∞–ª–µ–Ω—å–∫—É—é'):
            user_data['size'] = '–º–∞–ª–µ–Ω—å–∫—É—é'
            show_buttons(message.chat.id)
            zakaz = 3


    def show_buttons(user_id):
        markup = types.InlineKeyboardMarkup()
        pizza_buttons = [
            types.InlineKeyboardButton('–ü–µ–ø–µ—Ä–æ–Ω–∏', callback_data='–ø–µ–ø–µ—Ä–æ–Ω–∏'),
            types.InlineKeyboardButton('4 —Å—ã—Ä–∞', callback_data='4 —Å—ã—Ä–∞'),
            types.InlineKeyboardButton('–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', callback_data='–º–∞—Ä–≥–∞—Ä–∏—Ç–∞'),
            types.InlineKeyboardButton('–ì–∞–≤–∞–π—Å–∫–∞—è', callback_data='–≥–∞–≤–∞–π—Å–∫–∞—è')
        ]
        markup.add(*pizza_buttons)
        pizza = open('./pizza.png', 'rb')
        bot.send_photo(message.chat.id, pizza, caption='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É:', reply_markup=markup)
        zakaz = 4

def process_order(user_id, pizza_size):
    bot.send_message(user_id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {user_data["size"]} {pizza_size}.')
    bot.send_message(user_id, '–ö–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –ø–ª–∞—Ç–∏—Ç—å?')
    markup = types.InlineKeyboardMarkup()
    pay_buttons = [
        types.InlineKeyboardButton('–ë–µ–∑–Ω–∞–ª', callback_data='–∫–∞—Ä—Ç–æ–π'),
        types.InlineKeyboardButton('–Ω–∞–ª–∏—á–∫–∞', callback_data='–Ω–∞–ª–∏—á–Ω—ã–º–∏'),
        types.InlineKeyboardButton('–û–Ω–ª–∞–π–Ω', callback_data='–æ–Ω–ª–∞–π–Ω'),]
    markup.add(*pay_buttons)
    bot.send_message(user_id,  '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ª–∞—Ç—ã:', reply_markup=markup)
    zakaz = 5

    user_data['payment'] = True

def process_address(user_id, address):
    global zakaz
    user_data['address'] = address
    bot.send_message(user_id, f'–í—ã —Ö–æ—Ç–∏—Ç–µ {user_data["size"]} {user_data["type"]} , –æ–ø–ª–∞—Ç–∞ ‚Äì {user_data["payment"]}, –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É {user_data["address"]}?')
    zakaz = 7


def pizza(user_id, user_text):
    if match_text(user_text, '–ø–µ–ø–µ—Ä–æ–Ω–∏'):
        process_order(user_id, '–ø–µ–ø–µ—Ä–æ–Ω–∏')
    elif match_text(user_text, '4 —Å—ã—Ä–∞'):
        process_order(user_id, '4 —Å—ã—Ä–∞')
    elif match_text(user_text, '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞'):
        process_order(user_id, '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞')
    elif match_text(user_text, '–≥–∞–≤–∞–π—Å–∫—É—é'):
        process_order(user_id, '–≥–∞–≤–∞–π—Å–∫—É—é')

def finish(user_id, user_text):
    global zakaz, user_data, prv_ord, r
    r = randint(1,  742974395)
    if match_text(user_text, '–¥–∞') and prv_ord == False:
        bot.send_message(user_id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ü–∏—Ü—Ü–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        for adm in ADMINS:
            bot.send_message(adm, f'–ó–∞–∫–∞–∑ ‚Ññ{r}: {user_data["size"]} {user_data["type"]}. –û–ø–ª–∞—Ç–∞ {user_data["payment"]}. –î–æ—Å—Ç–∞–≤–∫–∞ {user_data["address"]} ')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
        data = {
            'user_id': user_id,
            'pizza_type': user_data['type'],
            'pizza_size': user_data['size'],
            'payment_method': user_data['payment'],
            'delivery_address': user_data['address']
        }
        save_order(user_id, data)
    elif prv_ord == True and match_text(user_text, '–¥–∞'):
        bot.send_message(user_id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ü–∏—Ü—Ü–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        previous_order = load_previous_order(user_id)
        for adm in ADMINS:
            bot.send_message(adm, f'–ó–∞–∫–∞–∑ ‚Ññ{r}: {previous_order["pizza_size"]} {previous_order["pizza_type"]}. –û–ø–ª–∞—Ç–∞ {previous_order["payment_method"]}. –î–æ—Å—Ç–∞–≤–∫–∞ {previous_order["delivery_address"]}')
    else:
        bot.send_message(user_id, '–î–∞–≤–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏–º –µ—â—ë —Ä–∞–∑')
        bot.send_message(user_id, '–ö–∞–∫—É—é –ø–∏—Ü—Ü—É –≤—ã —Ö–æ—Ç–∏—Ç–µ? –ë–æ–ª—å—à—É—é, —Å—Ä–µ–¥–Ω—é—é –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫—É—é?')
        user_data = {}
        zakaz = 2

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    global pizza, process_order,size
    if call.message:
        if call.data in ['–ø–µ–ø–µ—Ä–æ–Ω–∏', '4 —Å—ã—Ä–∞', '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–≥–∞–≤–∞–π—Å–∫–∞—è']:
            user_data['type'] = call.data
            pizza(call.message.chat.id, call.data)
        if call.data in ['–Ω–∞–ª–∏—á–Ω—ã–º–∏', '–∫–∞—Ä—Ç–æ–π', '–æ–Ω–ª–∞–π–Ω']:
            user_data['payment'] = call.data
            bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
            zakaz = 6
        if call.data in ['–±–æ–ª—å—à—É—é', '—Å—Ä–µ–¥–Ω—é—é', '–º–∞–ª–µ–Ω—å–∫—É—é']:
            size(call.message.chat.id, call.data)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)


def show_buttons_size(user_id):
    markup = types.InlineKeyboardMarkup()
    pizza_buttons = [
        types.InlineKeyboardButton('–ë–æ–ª—å—à—É—é', callback_data='–±–æ–ª—å—à—É—é'),
        types.InlineKeyboardButton('–°—Ä–µ–¥–Ω—é—é', callback_data='—Å—Ä–µ–¥–Ω—é—é'),
        types.InlineKeyboardButton('–ú–∞–ª–µ–Ω—å–∫—É—é', callback_data='–º–∞–ª–µ–Ω—å–∫—É—é'),
    ]
    markup.add(*pizza_buttons)
    bot.send_message(user_id, '–ö–∞–∫—É—é –ø–∏—Ü—Ü—É –≤—ã —Ö–æ—Ç–∏—Ç–µ?:', reply_markup=markup)

def save_order(user_id, data):
    with open('order.json', 'a') as file:
        file.write(json.dumps(data) + '\n')

bot.infinity_polling()